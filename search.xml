<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Thymeleaf语法]]></title>
    <url>%2F2019%2F06%2F18%2FThymeleaf%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Thymeleaf3语法 文章目录结构 一. th属性1. 常用th属性解读html有的属性，Thymeleaf基本都有，而常用的属性大概有七八个。其中th属性执行的优先级从1~8，数字越低优先级越高 1. th:text 设置当前元素的文本内容，相同功能的还有th:utext，两者的区别在于前者不会转义html标签，后者会。优先级不高：order=7 HTML代码 123&lt;!--th:text 设置当前元素的文本内容，常用，优先级不高--&gt;&lt;p th:text=&quot;$&#123;thText&#125;&quot; /&gt;&lt;p th:utext=&quot;$&#123;thUText&#125;&quot; /&gt; 后台代码 123456@RequestMapping(&quot;thymeleaf&quot;)public String thymeleaf(ModelMap map) &#123; map.put(&quot;thText&quot;, &quot;th:text 设置文本内容 &lt;b&gt;加粗&lt;/b&gt;&quot;); map.put(&quot;thUText&quot;, &quot;th:utext 设置文本内容 &lt;b&gt;加粗&lt;/b&gt;&quot;); return &quot;grammar/thymeleaf&quot;;&#125; 效果如下 12th:text 设置文本内容 &lt;b&gt;加粗&lt;/b&gt;th:utext 设置文本内容 加粗 2. th:value 设置当前元素的value值，类似修改指定属性的还有th:src，th:href。优先级不高：order=6 HTML代码 12&lt;!--th:value 设置当前元素的value值，常用，优先级仅比th:text高--&gt;&lt;input type=&quot;text&quot; th:value=&quot;$&#123;thValue&#125;&quot; /&gt; 后台代码 12345 @RequestMapping(&quot;/testThymeleaf&quot;)public String testThymeleaf(ModelMap map)&#123; map.put(&quot;thValue&quot;, &quot;thValue 设置当前元素的value值&quot;); return prefix+&quot;/testThymeleaf&quot;;&#125; 效果如下 1thValue 设置当前元素的value值 3. th:each 遍历循环元素，和th:text或th:value一起使用。注意该属性修饰的标签位置，详细往后看。优先级很高：order=2 用法1 HTML代码 123456&lt;!--th:each 遍历列表，常用，优先级很高，仅此于代码块的插入--&gt;&lt;!--th:each 修饰在div上，则div层重复出现，若只想p标签遍历，则修饰在p标签上--&gt;&lt;div style=&quot;background: yellow&quot; th:each=&quot;message : $&#123;thEach&#125;&quot;&gt; &lt;!-- 遍历整个div-p，不推荐--&gt; &lt;p th:text=&quot;$&#123;message&#125;&quot; /&gt;&lt;/div&gt; 后台代码 12345@RequestMapping(&quot;/testThymeleaf&quot;)public String testThymeleaf(ModelMap map)&#123; map.put(&quot;thEach&quot;, Arrays.asList(&quot;遍历列表1&quot;,&quot;遍历列表2&quot;,&quot;遍历列表3&quot;,&quot;遍历列表4&quot;)); return prefix+&quot;/testThymeleaf&quot;;&#125; 效果如下 用法二（常用,注意th:each标签的位置） HTML代码 1234&lt;div style=&quot;background: yellow&quot;&gt; &lt;!--只遍历p，推荐使用--&gt; &lt;p th:text=&quot;$&#123;message&#125;&quot; th:each=&quot;message : $&#123;thEach&#125;&quot; /&gt;&lt;/div&gt; 后台代码 12345@RequestMapping(&quot;/testThymeleaf&quot;)public String testThymeleaf(ModelMap map)&#123; map.put(&quot;thEach&quot;, Arrays.asList(&quot;遍历列表1&quot;,&quot;遍历列表2&quot;,&quot;遍历列表3&quot;,&quot;遍历列表4&quot;)); return prefix+&quot;/testThymeleaf&quot;;&#125; 效果如下 4. th:if 条件判断，类似的还有th:unless，th:switch，th:case。优先级较高：order=3 HTML代码 123&lt;!--th:if 条件判断，类似的有th:switch，th:case，优先级仅次于th:each, 其中#strings是变量表达式的内置方法--&gt;&lt;!--先判断th:if是否成立，，如果不成立就不显示整个P标签--&gt;&lt;p th:text=&quot;$&#123;thIf&#125;&quot; th:if=&quot;$&#123;not #strings.isEmpty(thIf)&#125;&quot;&gt;&lt;/p&gt; 后台代码 12345 @RequestMapping(&quot;/testThymeleaf&quot;)public String testThymeleaf(ModelMap map)&#123; map.put(&quot;thIf&quot;, &quot;我是有内容的&quot;); return prefix+&quot;/testThymeleaf&quot;;&#125; 效果如下 1我是有内容的 5. th:object 声明变量，一般和*{}一起配合使用，达到偷懒的效果。优先级一般：order=4 HTML代码 12345&lt;!--th:object 声明变量，和*&#123;&#125; 一起使用--&gt;&lt;div th:object=&quot;$&#123;thObject&#125;&quot;&gt; &lt;p&gt;对象的id: &lt;span th:text=&quot;*&#123;id&#125;&quot; /&gt;&lt;/p&gt;&lt;!--th:text=&quot;$&#123;thObject.id&#125;&quot;--&gt; &lt;p&gt;对象的name: &lt;span th:text=&quot;*&#123;name&#125;&quot; /&gt;&lt;/p&gt;&lt;!--$&#123;thObject.thName&#125;--&gt;&lt;/div&gt; 后台代码 12345678 @RequestMapping(&quot;/testThymeleaf&quot;)public String testThymeleaf(ModelMap map)&#123; TestZk testZk = new TestZk(); testZk.setId(1L); testZk.setName(&quot;wzk&quot;); map.put(&quot;thObject&quot;, testZk); return prefix+&quot;/testThymeleaf&quot;;&#125; 效果如下 12对象的id: 1对象的name: wzk 二. 常用th属性使用 使用Thymeleaf属性需要注意点以下五点： 一、若要使用Thymeleaf语法，首先要声明名称空间： xmlns:th=”http://www.thymeleaf.org&quot; 二、设置文本内容 th:text，设置input的值 th:value，循环输出 th:each，条件判断 th:if，插入代码块 th:insert，定义代码块 th:fragment，声明变量 th:object 三、th:each 的用法需要格外注意，打个比方：如果你要循环一个div中的p标签，则th:each属性必须放在p标签上。若你将th:each属性放在div上，则循环的是将整个div。 四、变量表达式中提供了很多的内置方法，该内置方法是用#开头，请不要与#{}消息表达式弄混。 五、th:insert，th:replace，th:include 三种插入代码块的效果相似，但区别很大。 二、标准表达式语法123456789$&#123;...&#125; 变量表达式，Variable Expressions@&#123;...&#125; 链接表达式，Link URL Expressions#&#123;...&#125; 消息表达式，Message Expressions~&#123;...&#125; 代码块表达式，Fragment Expressions*&#123;...&#125; 选择变量表达式，Selection Variable Expressions 变量表达式使用频率最高，其功能也是非常的丰富。所以我们先从简单的代码块表达式开始，然后是消息表达式，再是链接表达式，最后是变量表达式，随带介绍选择变量表达式 1. ~{…} 代码块表达式 支持两种语法结构 123456推荐：~&#123;templatename::fragmentname&#125;支持：~&#123;templatename::#id&#125;templatename：模版名，Thymeleaf会根据模版名解析完整路径：/resources/templates/templatename.html，要注意文件的路径。fragmentname：片段名，Thymeleaf通过th:fragment声明定义代码块，即：th:fragment=&quot;fragmentname&quot;id：HTML的id选择器，使用时要在前面加上#号，不支持class选择器。 代码块表达式的使用 代码块表达式需要配合th属性（th:insert，th:replace，th:include）一起使用。 th:insert：将代码块片段整个插入到使用了th:insert的HTML标签中， th:replace：将代码块片段整个替换使用了th:replace的HTML标签中， th:include：将代码块片段包含的内容插入到使用了th:include的HTML标签中， 用一个官方例子来区分三者的不同，第三部分会通过实战再次用到该知识。123456789101112131415161718192021222324&lt;!--th:fragment定义代码块标识--&gt;&lt;footer th:fragment=&quot;copy&quot;&gt; 内容。。。。。&lt;/footer&gt;&lt;!--三种不同的引入方式--&gt;&lt;div th:insert=&quot;footer :: copy&quot;&gt;&lt;/div&gt;&lt;div th:replace=&quot;footer :: copy&quot;&gt;&lt;/div&gt;&lt;div th:include=&quot;footer :: copy&quot;&gt;&lt;/div&gt;&lt;!--th:insert是在div中插入代码块，即多了一层div--&gt;&lt;div&gt; &lt;footer&gt; 内容。。。。。 &lt;/footer&gt;&lt;/div&gt;&lt;!--th:replace是将代码块代替当前div，其html结构和之前一致--&gt;&lt;footer&gt; 内容。。。。。&lt;/footer&gt;&lt;!--th:include是将代码块footer的内容插入到div中，即少了一层footer--&gt;&lt;div&gt; 内容。。。。。&lt;/div&gt; 3. #{…} 消息表达式 消息表达式一般用于国际化的场景。结构：th:text=”#{msg}” 。会在第三部分的实战详细介绍。 4. @{…} 链接表达式 链接表达式好处 1234567不管是静态资源的引用，form表单的请求，凡是链接都可以用@&#123;...&#125; 。这样可以动态获取项目路径，即便项目名变了，依然可以正常访问修改项目名，链接表达式会自动修改路径，避免资源文件找不到 (等价于 应用的访问路径)&lt;!--可以不加项目名称,直接用&quot;/&quot;--&gt;server.context-path = /项目名称 &lt;!--SpirngBoot2.0开启弃用了，改为使用一下参数设置--&gt;server.servlet.context-path = /项目名称//可以不填 链接表达式结构 无参：@{/xxx} 有参：@{/xxx(k1=v1,k2=v2)} 对应url结构：xxx?k1=v1&amp;k2=v2 引入本地资源：@{/项目本地的资源路径} 引入外部资源：@{/webjars/资源在jar包中的路径} 示例： 123 //使用ruoyi做例子&lt;script th:src=&quot;@&#123;/js/jquery.min.js&#125;&quot;&gt;&lt;/script&gt; 在没有配置server.context-path的情况下 引用的文件是： 123456当设置server.servlet.context-path = / 请求的url为：http://localhost/js/jquery.min.js当设置server.servlet.context-path = /wzk 请求的url为：http://localhost/wzk/js/jquery.min.js//只是访问的路径改变了，后台引用文件的位置没变化 5. ${…}变量表达式变量表达式有丰富的内置方法，使其更强大，更方便。 变量表达式功能 一、可以获取对象的属性和方法 二、可以使用ctx，vars，locale，request，response，session，servletContext内置对象 三、可以使用dates，numbers，strings，objects，arrays，lists，sets，maps等内置方法（重点介绍） 常用的内置对象 一、ctx ：上下文对象。 二、vars ：上下文变量。 三、locale：上下文的语言环境。 四、request：（仅在web上下文）的 HttpServletRequest 对象。 五、response：（仅在web上下文）的 HttpServletResponse 对象。 六、session：（仅在web上下文）的 HttpSession 对象。 七、servletContext：（仅在web上下文）的 ServletContext 对象 内置对象使用示例123456&lt;p th:text=&quot;$&#123;#ctx.#servletContext.getContextPath()&#125;&quot; /&gt;&lt;p th:text=&quot;$&#123;#vars.#servletContext.getContextPath()&#125;&quot; /&gt;&lt;p th:text=&quot;$&#123;#request.getContextPath()&#125;&quot; /&gt;&lt;p th:text=&quot;$&#123;#response.addHeader(&apos;headInfo&apos;,&apos;content&apos;)&#125;&quot; /&gt;&lt;p th:text=&quot;$&#123;#session.getAttribute(&apos;mySession&apos;)&#125;&quot; /&gt;&lt;p th:text=&quot;$&#123;#servletContext.getContextPath()&#125;&quot; /&gt; 常用的内置方法 一、strings：字符串格式化方法，常用的Java方法它都有。比如：equals，equalsIgnoreCase，length，trim，toUpperCase，toLowerCase，indexOf，substring，replace，startsWith，endsWith，contains，containsIgnoreCase等 二、numbers：数值格式化方法，常用的方法有：formatDecimal等 三、bools：布尔方法，常用的方法有：isTrue，isFalse等 四、arrays：数组方法，常用的方法有：toArray，length，isEmpty，contains，containsAll等 五、lists，sets：集合方法，常用的方法有：toList，size，isEmpty，contains，containsAll，sort等 六、maps：对象方法，常用的方法有：size，isEmpty，containsKey，containsValue等 七、dates：日期方法，常用的方法有：format，year，month，hour，createNow等 常用内置方法示例 前端代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;ITDragon Thymeleaf 内置方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;ITDragon Thymeleaf 内置方法&lt;/h2&gt; &lt;h3&gt;#strings &lt;/h3&gt; &lt;div th:if=&quot;$&#123;not #strings.isEmpty(itdragonStr)&#125;&quot; &gt; &lt;p&gt;Old Str : &lt;span th:text=&quot;$&#123;itdragonStr&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;toUpperCase : &lt;span th:text=&quot;$&#123;#strings.toUpperCase(itdragonStr)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;toLowerCase : &lt;span th:text=&quot;$&#123;#strings.toLowerCase(itdragonStr)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;equals : &lt;span th:text=&quot;$&#123;#strings.equals(itdragonStr, &apos;itdragonblog&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;equalsIgnoreCase : &lt;span th:text=&quot;$&#123;#strings.equalsIgnoreCase(itdragonStr, &apos;itdragonblog&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;indexOf : &lt;span th:text=&quot;$&#123;#strings.indexOf(itdragonStr, &apos;r&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;substring : &lt;span th:text=&quot;$&#123;#strings.substring(itdragonStr, 2, 8)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;replace : &lt;span th:text=&quot;$&#123;#strings.replace(itdragonStr, &apos;it&apos;, &apos;IT&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;startsWith : &lt;span th:text=&quot;$&#123;#strings.startsWith(itdragonStr, &apos;it&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;contains : &lt;span th:text=&quot;$&#123;#strings.contains(itdragonStr, &apos;IT&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#numbers &lt;/h3&gt; &lt;div&gt; &lt;p&gt;formatDecimal 整数部分随意，小数点后保留两位，四舍五入: &lt;span th:text=&quot;$&#123;#numbers.formatDecimal(itdragonNum, 0, 2)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;formatDecimal 整数部分保留五位数，小数点后保留两位，四舍五入: &lt;span th:text=&quot;$&#123;#numbers.formatDecimal(itdragonNum, 5, 2)&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#bools &lt;/h3&gt; &lt;div th:if=&quot;$&#123;#bools.isTrue(itdragonBool)&#125;&quot;&gt; &lt;p th:text=&quot;$&#123;itdragonBool&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#arrays &lt;/h3&gt; &lt;div th:if=&quot;$&#123;not #arrays.isEmpty(itdragonArray)&#125;&quot;&gt; &lt;p&gt;length : &lt;span th:text=&quot;$&#123;#arrays.length(itdragonArray)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;contains : &lt;span th:text=&quot;$&#123;#arrays.contains(itdragonArray, 5)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;containsAll : &lt;span th:text=&quot;$&#123;#arrays.containsAll(itdragonArray, itdragonArray)&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#lists &lt;/h3&gt; &lt;div th:if=&quot;$&#123;not #lists.isEmpty(itdragonList)&#125;&quot;&gt; &lt;p&gt;size : &lt;span th:text=&quot;$&#123;#lists.size(itdragonList)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;contains : &lt;span th:text=&quot;$&#123;#lists.contains(itdragonList, 0)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;sort : &lt;span th:text=&quot;$&#123;#lists.sort(itdragonList)&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#maps &lt;/h3&gt; &lt;div th:if=&quot;$&#123;not #maps.isEmpty(itdragonMap)&#125;&quot;&gt; &lt;p&gt;size : &lt;span th:text=&quot;$&#123;#maps.size(itdragonMap)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;containsKey : &lt;span th:text=&quot;$&#123;#maps.containsKey(itdragonMap, &apos;thName&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;containsValue : &lt;span th:text=&quot;$&#123;#maps.containsValue(itdragonMap, &apos;#maps&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;#dates &lt;/h3&gt; &lt;div&gt; &lt;p&gt;format : &lt;span th:text=&quot;$&#123;#dates.format(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;custom format : &lt;span th:text=&quot;$&#123;#dates.format(itdragonDate, &apos;yyyy-MM-dd HH:mm:ss&apos;)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;day : &lt;span th:text=&quot;$&#123;#dates.day(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;month : &lt;span th:text=&quot;$&#123;#dates.month(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;monthName : &lt;span th:text=&quot;$&#123;#dates.monthName(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;year : &lt;span th:text=&quot;$&#123;#dates.year(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;dayOfWeekName : &lt;span th:text=&quot;$&#123;#dates.dayOfWeekName(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;hour : &lt;span th:text=&quot;$&#123;#dates.hour(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;minute : &lt;span th:text=&quot;$&#123;#dates.minute(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;second : &lt;span th:text=&quot;$&#123;#dates.second(itdragonDate)&#125;&quot;/&gt;&lt;/p&gt; &lt;p&gt;createNow : &lt;span th:text=&quot;$&#123;#dates.createNow()&#125;&quot;/&gt;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 后端代码 1234567891011121314@RequestMapping(&quot;varexpressions&quot;)public String varexpressions(ModelMap map) &#123; map.put(&quot;itdragonStr&quot;, &quot;itdragonBlog&quot;); map.put(&quot;itdragonBool&quot;, true); map.put(&quot;itdragonArray&quot;, new Integer[]&#123;1,2,3,4&#125;); map.put(&quot;itdragonList&quot;, Arrays.asList(1,3,2,4,0)); Map itdragonMap = new HashMap(); itdragonMap.put(&quot;thName&quot;, &quot;$&#123;#...&#125;&quot;); itdragonMap.put(&quot;desc&quot;, &quot;变量表达式内置方法&quot;); map.put(&quot;itdragonMap&quot;, itdragonMap); map.put(&quot;itdragonDate&quot;, new Date()); map.put(&quot;itdragonNum&quot;, 888.888D); return &quot;grammar/varexpressions&quot;;&#125; 三. Thymeleaf在SpringBoot应用Thymeleaf是Spring Boot 官方推荐使用的模版引擎，这也意味着用Thymeleaf比其他模版引擎更简单。开发步骤：第一步：引入Thymeleaf依赖。第二步： 提取公共页面，提高代码的重用性，统一页面风格。第三步：页面显示和国际化功能 引入Thymeleafpom.xml 引入Thymeleaf的依赖，并确定其版本12345&lt;!--引入模版引擎thymeleaf--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 四、总结一、Thymeleaf 是Spring Boot 官方推荐的Java模版引擎框架，其文件扩展名为.html 二、Thymeleaf 几乎支持所有的html属性，用于赋值的th:text和th:value，用于循环遍历的th:each，用于条件判断的th:if 三、Thymeleaf 提供四种标准的表达式，有丰富内置方法的${}，用于国际化的#{}，用于代码插入的~{}，用于处理链接的@{} 四、一定要注意循环遍历的th:each和代码插入的th:insert用法，尽量避免破坏html结构的细节问题 参考文章 https://www.cnblogs.com/itdragon/archive/2018/04/13/8724291.html]]></content>
      <categories>
        <category>模板引擎</category>
        <category>Thymeleaf</category>
      </categories>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[若依时间表单]]></title>
    <url>%2F2019%2F06%2F18%2F%E8%8B%A5%E4%BE%9D%E6%97%B6%E9%97%B4%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[若依新增一个日期选择表单一. datetimepicker示例 引入js，css文件 123//由于common.js里面没有引进来的&lt;th:block th:include=&quot;include :: datetimepicker-js&quot; /&gt;&lt;th:block th:include=&quot;include :: datetimepicker-css&quot; /&gt; 初始化时间控件 12345678910111213141516171819//日期选择表单代码&lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;font-noraml&quot;&gt;显示年月日&lt;/label&gt; &lt;div class=&quot;input-group date&quot;&gt; &lt;span class=&quot;input-group-addon&quot;&gt; &lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;需要初始化的ID&quot;&gt; &lt;/div&gt;&lt;/div&gt; //初始化时间插件$（function（）&#123; $(&quot;#需要初始化的ID&quot;).datetimepicker(&#123; format: &quot;yyyy-mm-dd&quot;, minView: &quot;month&quot;, autoclose: true &#125;);&#125;） 二. laydate示例 初始化控件12345678910111213141516171819//日期选择表单代码&lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;font-noraml&quot;&gt;显示年月日&lt;/label&gt; &lt;div class=&quot;input-group date&quot;&gt; &lt;span class=&quot;input-group-addon&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;需要初始化的ID&quot; &gt; &lt;/div&gt;&lt;/div&gt;//common.js里面已经有了laydate所需的js，css文件$(function()&#123; layui.use(&apos;laydate&apos;, function()&#123; var laydate = layui.laydate; laydate.render(&#123; elem: &apos;#需要初始化的ID&apos;, type: &apos;date&apos; &#125;);&#125;);&#125;) 新增一个单框范围选择一. laydate示例 前端代码 123456&lt;li class=&quot;select-time&quot;&gt; &lt;label&gt;创建时间： &lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;time-input&quot; id=&quot;createTimeBeginTime&quot; placeholder=&quot;开始时间&quot; name=&quot;params[createTimeBeginTime]&quot;/&gt; &lt;span&gt;-&lt;/span&gt; &lt;input type=&quot;text&quot; class=&quot;time-input&quot; id=&quot;createTimeBeginTimeEndTime&quot; placeholder=&quot;结束时间&quot; name=&quot;params[createTimeBeginTimeEndTime]&quot;/&gt;&lt;/li&gt; 后台处理Mapper 1234567//实体类继承了BaseEntity类，BaseEntity里面名称为params的Map，用来存放其他参数的&lt;if test=&quot;params.birthdayBeginTime != null and params.birthdayBeginTime != &apos;&apos;&quot;&gt;&lt;!-- 开始时间检索 --&gt;and date_format(birthday,&apos;%y%m%d&apos;) &amp;gt;= date_format(#&#123;params.birthdayBeginTime&#125;,&apos;%y%m%d&apos;)&lt;/if&gt;&lt;if test=&quot;params.birthdayEndTime != null and params.birthdayEndTime != &apos;&apos;&quot;&gt;&lt;!-- 结束时间检索 --&gt;and date_format(birthday,&apos;%y%m%d&apos;) &amp;lt;= date_format(#&#123;params.birthdayEndTime&#125;,&apos;%y%m%d&apos;)&lt;/if&gt;]]></content>
      <tags>
        <tag>ruoyi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown基本语法]]></title>
    <url>%2F2019%2F06%2F17%2Fmarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. 标题示例 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 2. 字体 加粗示例：1**加粗的字体** 效果效果如下： 加粗的字体 斜体示例： 1*斜体的字体* 效果效果如下： 加粗的字体 斜体加粗示例： 1***斜体加粗*** 效果如下： 斜体加粗 删除线示例：1~~带有删除线的字体~~ 效果如下： 带有删除线的字体 3. 引用示例： 1&gt;这是引用的内容 效果如下： 这是引用的内容 4. 分割线示例： 123ps:使用时要去掉////***//--- 效果如下： 5. 图片语法 1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 1![无法显示请M我](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2426942089,1305444686&amp;fm=26&amp;gp=0.jpg &quot;搬砖使我快乐&quot;) 效果如下： 6. 列表 无序列表示例：1234567- 列表1 - 子列表1 - 子类表2 - 子子列表1 - 子子列表2- 列表2- 列表3 效果如下： 列表1 子列表1 子类表2 子子列表1 子子列表2 列表2 列表3 有序列表示例：1231.有序列表12.有序列表23.有序列表3 效果如下：1.有序列表12.有序列表23.有序列表3 7.表格语法： 12345678910|表头|表头|表头||---|:--:|---:|内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右 示例： 12345|姓名|技能|排行||--|:--:|--:|张三|剑|大哥李四|斧|二哥王五|枪|三弟 效果如下： 姓名 技能 排行 张三 剑 大哥 李四 斧 二哥 王五 枪 三弟 8.代码语法： 单行代码：代码之间分别用一个反引号包起来示例： 1`&lt;html&gt;&lt;/html&gt;` 效果如下： &lt;html&gt;&lt;/html&gt; 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行示例： 12345ps:实际使用请去掉[][```] &lt;html&gt;&lt;/html&gt; &lt;html&gt;&lt;/html&gt;[```] 效果如下： 12&lt;html&gt;&lt;/html&gt;&lt;html&gt;&lt;/html&gt; 9.超链接跳转语法： 1[文字内容](网址) 示例： 1[百度一下]（www.baidu.com） 效果如下百度一下]]></content>
      <categories>
        <category>Markdown</category>
        <category>基本使用</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
